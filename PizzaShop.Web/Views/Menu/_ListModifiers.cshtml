@model PizzaShop.DataAccess.ViewModels.ModifierTabViewModel;
@inject IHttpContextAccessor Accessor;
@using Newtonsoft.Json;
@using PizzaShop.ViewModels;
@{
    var PageSize = Model.Pagination.PageSize;
    var PageIndex = Model.Pagination.PageIndex;
    var TotalPage = Model.Pagination.TotalPage;
    var SearchString = Model.Pagination.SearchString;
    var TotalRecord = Model.Pagination.TotalRecord;
    var permission = JsonConvert.DeserializeObject<List<ManageRolePermissioinViewModel>>(Accessor.HttpContext.Session.GetString("permission"));
}
<section class="table-responsive">
    <table class="table modifier-table mb-0">
        <thead>
            <tr>
                <th scope="col">
                    <div class="form-check">
                        <input class="form-check-input " type="checkbox" value="" id="selectAllModifiers" />
                    </div>
                </th>
                <th scope="col">Name</th>
                <th scope="col" class="text-center">Unit</th>
                <th scope="col" class="text-center">Rate</th>
                <th scope="col" class="text-center">Quantity</th>
                <th scope="col" class="text-center d-@(permission[2].Canaddedit == false && permission[2].Candelete == false ? "none" : "")">Action</th>
            </tr>
        </thead>
        <tbody class="table-group-devider" id="ModifiersList">
            @if (Model.ModifierList == null || Model.ModifierList.Count == 0)
            {
                <tr>
                    <td colspan="7" class="text-center">No Modifiers Found</td>
                </tr>
            }
            else
            {
                @foreach (var modifier in Model.ModifierList)
                {
                    <tr>
                        <td>
                            <div class="form-check">
                                <input class="form-check-input modifiersCheckbox" type="checkbox" value="@modifier.Id"/>
                            </div>
                        </td>
                        <td >@modifier.Name</td>
                        <td class="text-center">@modifier.Unit</td>
                        <td class="text-center">@modifier.Rate</td>
                        <td class="text-center">@modifier.Quantity</td>
                        <td class="text-center d-@(permission[2].Canaddedit == false && permission[2].Candelete == false ? "none" : "")">
                            <div class="d-flex justify-content-center align-items-center">
                                <button type="button" class="btn p-0 border-0 me-2 editModifierBtn  d-@(permission[2].Canaddedit == false ? "none" : "")" value="@modifier.Id">
                                <i class="fa-solid fa-pen"></i>
                            </button>
                            <button type="button" class="btn p-0 border-0 deleteModifier  d-@(permission[2].Candelete == false ? "none" : "")" value="@modifier.Id">
                                <i class="fa-regular fa-trash-can"></i>
                            </button>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</section>

<div class="d-flex justify-content-center justify-content-sm-end align-items-center mt-2">
    <p class="mb-0 fs-6 d-none d-md-block">Items Per page</p>
    <select class="mx-2 cursor-pointer" aria-label="Default select example" id="modifierPageSize">
        <option value="5" selected="@(PageSize == 5 ? true : false)">5</option>
        <option value="10" selected="@(PageSize == 10 ? true : false)">10</option>
        <option value="15" selected="@(PageSize == 15 ? true : false)">15</option>
    </select>

    <span class="mb-0 ms-2 me-2 d-none d-md-block" id="showing">Showing @(Math.Min(((PageIndex - 1) * PageSize) + 1, TotalRecord)) -
        @(Math.Min(PageIndex * PageSize, TotalRecord)) of @TotalRecord</span>
    @if (PageIndex > 1)
    {
        <span class="btn btn-outline-secondary me-1 px-3 py-0" name="PageIndex" id="PreviousModifiers">
            <i class="fa-solid fa-less-than fa-sm"></i>
        </span>
    }
    else
    {
        <button class="btn btn-outline-secondary me-1 px-3 py-0" name="PageIndex" disabled>
            <i class="fa-solid fa-less-than fa-sm"></i>
        </button>
    }

    @if (PageIndex < TotalPage)
    {
        <a class="btn btn-outline-secondary px-3 py-0" name="PageIndex" id="NextModifiers">
            <i class="fa-solid fa-greater-than fa-sm"></i>
        </a>
    }
    else
    {
        <button class="btn btn-outline-secondary px-3 py-0" name="PageIndex" disabled>
            <i class="fa-solid fa-greater-than fa-sm"></i>
        </button>
    }
</div>

@Html.Partial("_AddModifierModal", Model.AddEditModifier)

<div id="editModifierContainer">

</div>

<!-- All Modal  -->
<!-- delete Modifier Modal -->
<div class="modal fade" id="deleteModifiersModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="text-center">
                <i class="fa-solid fa-triangle-exclamation fa-2xl" style="color: #FFD43B;"></i>
            </div>
            <div class="modal-body text-center p-1">
                <p class="fw-bold mb-0">Are you sure you want to delete this modifier?</p>
            </div>
            <div class="modal-footer d-flex justify-content-center border-0">
                <button type="button" class="btn btn-primary" id="confirmDeleteModifierBtn">Yes</button>
                <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<!-- Multipledelete Modifier Modal -->
<div class="modal fade" id="multiDeleteModifiersModal" tabindex="-1" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="text-center">
                <i class="fa-solid fa-triangle-exclamation fa-2xl" style="color: #FFD43B;"></i>
            </div>
            <div class="modal-body text-center p-1">
                <p class="fw-bold mb-0">Are you sure you want to delete this modifiers?</p>
            </div>
            <div class="modal-footer d-flex justify-content-center border-0">
                <button type="button" class="btn btn-primary" id="confirmMultiDeleteModifierBtn">Yes</button>
                <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<script>
    var modifierPageIndex = @PageIndex;
    var deleteModifierId;

    function GetFilteredModifiers() {
        var SearchString = $("#searchModifier").val();
        var pageSize = $("#modifierPageSize").val();

        if (ajaxRequest && ajaxRequest.readyState !== 4)
            ajaxRequest.abort();

        ajaxRequest = $.ajax({
            url: "/Menu/GetModifiersByModGrpId",
            type: "GET",
            data: {
                id: ModifierGroupId,
                pageIndex: modifierPageIndex,
                pageSize: pageSize,
                searchString: SearchString
            },
            success: function (data) {
                $("#modifiers").html(data);
            },
            error: function (error) {
                toastr.error(error.message);
            }
        })
    }

    $('#modifierPageSize').change(function () {
        var pageSize = @PageSize
        var pageIndex = 1
        GetFilteredModifiers();
    })

    $('#searchModifier').keyup(function () {
        clearTimeout(debounceTimer);
        modifierPageIndex = 1
        pageSize = @PageSize
        deleteModifierIds = []
            debounceTimer = setTimeout(() => {
                GetFilteredModifiers();
            }, 400)
    })

    $("#PreviousModifiers").click(function () {
        modifierPageIndex -= 1;
        deleteModifierIds = []
        GetFilteredModifiers()
    })

    $('#NextModifiers').click(function () {
        $("#PreviousBtn").attr('disabled', false)
        modifierPageIndex += 1;
        deleteModifierIds = []
        GetFilteredModifiers()
    })

    $(".editModifierBtn").click(function () {
        var id = $(this).val();
        $.ajax({
            url: "/Menu/EditModifier",
            type: "GET",
            data: { id: id },
            success: function (data) {
                if(data == null)
                    navigateToLogin();
                $("#editModifierContainer").html(data);
                $("#editModifierModal").modal('show')
            },
            error: function (error) {
                toastr.error(error.message);
            }
        })
    })

    $(".deleteModifier").click(function(){
        deleteModifierId = $(this).val()
        $("#deleteModifiersModal").modal('show')
    })

    $("#confirmDeleteModifierBtn").click(function(){
        $.ajax({
            url: "/Menu/DeleteModifier",
            type: "POST",
            data: { id: deleteModifierId },
            success: function (data) {
                if(data == null)
                    navigateToLogin();
                if(data.isSuccess)
                    toastr.success(data.message);
                else
                    toastr.error(data.message);
                $("#deleteModifiersModal").modal('hide')
                GetFilteredModifiers();
            },
            error: function (error) {
                toastr.error(error.message);
            }
        })
    })

    var deleteModifierIds = [];

    $("#ModifiersList").on('change', '.modifiersCheckbox', function () {
        const modifierId = $(this).val();

        if ($(this).is(':checked') && !deleteModifierIds.includes(modifierId)) {
            deleteModifierIds.push(modifierId);
        } else {
            deleteModifierIds = deleteModifierIds.filter(id => id !== modifierId);
            $('#selectAllModifiers').prop('checked', false);
        }
        
        if ($('.modifiersCheckbox:checked').length === $('.modifiersCheckbox').length) {
            $('#selectAllModifiers').prop('checked', true);
        }
    });

    $('#selectAllModifiers').change(function () {
        const isChecked = $(this).is(':checked');
        $('.modifiersCheckbox').each(function () {
            $(this).prop('checked', isChecked);

            const itemId = $(this).val();
            if (isChecked && !deleteModifierIds.includes(itemId)) {
                deleteModifierIds.push(itemId);
            } else if (!isChecked) {
                deleteModifierIds = [];
            }
        });

    });

    $("#deleteMultipleModifiersBtn").click(function(){
        if(deleteModifierIds.length > 0)
            $("#multiDeleteModifiersModal").modal('show');
        else    
            toastr.warning("Please select at least one modifier");
    })

    $("#confirmMultiDeleteModifierBtn").click(function(){
        if(deleteModifierIds.length == 0)
        {
              toastr.warning("Please select at least one modifier");
        }
        
        $.ajax({
            url: "/Menu/DeleteMultipleModifier",
            type: "POST",
            data: { modifierIds: deleteModifierIds },
            success: function (data) {
                if(data.isSuccess)
                {
                    toastr.success(data.message);
                    $("#multiDeleteModifiersModal").modal('hide')
                    GetFilteredModifiers();
                }
                else
                    toastr.error(data.message);
            },
            error: function (error) {
                toastr.error(error.message);
            }
        })
    });

</script>